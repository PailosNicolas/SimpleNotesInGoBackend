// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: categories.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (id, name, user_id)
VALUES ($1, $2, $3)
RETURNING id, name, user_id
`

type CreateCategoryParams struct {
	ID     uuid.UUID
	Name   string
	UserID uuid.UUID
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory, arg.ID, arg.Name, arg.UserID)
	var i Category
	err := row.Scan(&i.ID, &i.Name, &i.UserID)
	return i, err
}

const getCategoriesByUser = `-- name: GetCategoriesByUser :many
SELECT id, name, user_id
FROM categories
WHERE user_id=$1
ORDER BY name DESC
`

func (q *Queries) GetCategoriesByUser(ctx context.Context, userID uuid.UUID) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getCategoriesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
